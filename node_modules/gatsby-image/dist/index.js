"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _jsxFileName = "/Users/mike/dev/gatsby-v2/packages/gatsby-image/src/index.js";

// Handle legacy names for image queries.
const convertProps = props => {
  let convertedProps = (0, _objectSpread2.default)({}, props);

  if (convertedProps.responsiveResolution) {
    convertedProps.resolutions = convertedProps.responsiveResolution;
    delete convertedProps.responsiveResolution;
  }

  if (convertedProps.responsiveSizes) {
    convertedProps.sizes = convertedProps.responsiveSizes;
    delete convertedProps.responsiveSizes;
  }

  return convertedProps;
}; // Cache if we've seen an image before so we don't both with
// lazy-loading & fading in on subsequent mounts.


const imageCache = {};

const inImageCache = props => {
  const convertedProps = convertProps(props); // Find src

  const src = convertedProps.sizes ? convertedProps.sizes.src : convertedProps.resolutions.src;

  if (imageCache[src]) {
    return true;
  } else {
    imageCache[src] = true;
    return false;
  }
};

let io;
const listeners = [];

function getIO() {
  if (typeof io === `undefined` && typeof window !== `undefined` && window.IntersectionObserver) {
    io = new window.IntersectionObserver(entries => {
      entries.forEach(entry => {
        listeners.forEach(l => {
          if (l[0] === entry.target) {
            // Edge doesn't currently support isIntersecting, so also test for an intersectionRatio > 0
            if (entry.isIntersecting || entry.intersectionRatio > 0) {
              io.unobserve(l[0]);
              l[1]();
            }
          }
        });
      });
    }, {
      rootMargin: `200px`
    });
  }

  return io;
}

const listenToIntersections = (el, cb) => {
  getIO().observe(el);
  listeners.push([el, cb]);
};

let isWebpSupportedCache = null;

const isWebpSupported = () => {
  if (isWebpSupportedCache !== null) {
    return isWebpSupportedCache;
  }

  const elem = typeof window !== `undefined` ? window.document.createElement(`canvas`) : {};

  if (elem.getContext && elem.getContext(`2d`)) {
    isWebpSupportedCache = elem.toDataURL(`image/webp`).indexOf(`data:image/webp`) === 0;
  } else {
    isWebpSupportedCache = false;
  }

  return isWebpSupportedCache;
};

const noscriptImg = props => {
  // Check if prop exists before adding each attribute to the string output below to prevent
  // HTML validation issues caused by empty values like width="" and height=""
  const src = props.src ? `src="${props.src}" ` : `src=""`; // required attribute

  const srcSet = props.srcSet ? `srcset="${props.srcSet}" ` : ``;
  const sizes = props.sizes ? `sizes="${props.sizes}" ` : ``;
  const title = props.title ? `title="${props.title}" ` : ``;
  const alt = props.alt ? `alt="${props.alt}" ` : `alt=""`; // required attribute

  const width = props.width ? `width="${props.width}" ` : ``;
  const height = props.height ? `height="${props.height}" ` : ``;
  const opacity = props.opacity ? props.opacity : `1`;
  const transitionDelay = props.transitionDelay ? props.transitionDelay : `0.5s`;
  return `<img ${width}${height}${src}${srcSet}${alt}${title}${sizes}style="position:absolute;top:0;left:0;transition:opacity 0.5s;transition-delay:${transitionDelay};opacity:${opacity};width:100%;height:100%;object-fit:cover;object-position:center"/>`;
};

const Img = props => {
  const {
    style,
    onLoad
  } = props,
        otherProps = (0, _objectWithoutProperties2.default)(props, ["style", "onLoad"]);
  return _react.default.createElement("img", (0, _extends2.default)({}, otherProps, {
    onLoad: onLoad,
    style: (0, _objectSpread2.default)({
      position: `absolute`,
      top: 0,
      left: 0,
      transition: `opacity 0.5s`,
      width: `100%`,
      height: `100%`,
      objectFit: `cover`,
      objectPosition: `center`
    }, style),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109
    },
    __self: void 0
  }));
};

Img.propTypes = {
  style: _propTypes.default.object,
  onLoad: _propTypes.default.func
};

class Image extends _react.default.Component {
  constructor(props) {
    super(props); // If this browser doesn't support the IntersectionObserver API
    // we default to start downloading the image right away.

    let isVisible = true;
    let imgLoaded = true;
    let IOSupported = false; // If this image has already been loaded before then we can assume it's
    // already in the browser cache so it's cheap to just show directly.

    const seenBefore = inImageCache(props);

    if (!seenBefore && typeof window !== `undefined` && window.IntersectionObserver) {
      isVisible = false;
      imgLoaded = false;
      IOSupported = true;
    } // Always don't render image while server rendering


    if (typeof window === `undefined`) {
      isVisible = false;
      imgLoaded = false;
    }

    this.state = {
      isVisible,
      imgLoaded,
      IOSupported
    };
    this.handleRef = this.handleRef.bind(this);
  }

  handleRef(ref) {
    if (this.state.IOSupported && ref) {
      listenToIntersections(ref, () => {
        this.setState({
          isVisible: true,
          imgLoaded: false
        });
      });
    }
  }

  render() {
    const {
      title,
      alt,
      className,
      outerWrapperClassName,
      style = {},
      imgStyle = {},
      sizes,
      resolutions,
      backgroundColor,
      Tag
    } = convertProps(this.props);
    let bgColor;

    if (typeof backgroundColor === `boolean`) {
      bgColor = `lightgray`;
    } else {
      bgColor = backgroundColor;
    }

    const imagePlaceholderStyle = (0, _objectSpread2.default)({
      opacity: this.state.imgLoaded ? 0 : 1,
      transitionDelay: `0.25s`
    }, imgStyle);
    const imageStyle = (0, _objectSpread2.default)({
      opacity: this.state.imgLoaded || this.props.fadeIn === false ? 1 : 0
    }, imgStyle);

    if (sizes) {
      const image = sizes; // Use webp by default if browser supports it

      if (image.srcWebp && image.srcSetWebp && isWebpSupported()) {
        image.src = image.srcWebp;
        image.srcSet = image.srcSetWebp;
      } // The outer div is necessary to reset the z-index to 0.


      return _react.default.createElement(Tag, {
        className: `${outerWrapperClassName ? outerWrapperClassName : ``} gatsby-image-outer-wrapper`,
        style: {
          // Let users set component to be absolutely positioned.
          position: style.position === `absolute` ? `initial` : `relative`
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 222
        },
        __self: this
      }, _react.default.createElement(Tag, {
        className: `${className ? className : ``} gatsby-image-wrapper`,
        style: (0, _objectSpread2.default)({
          position: `relative`,
          overflow: `hidden`
        }, style),
        ref: this.handleRef,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 231
        },
        __self: this
      }, _react.default.createElement(Tag, {
        style: {
          width: `100%`,
          paddingBottom: `${100 / image.aspectRatio}%`
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 241
        },
        __self: this
      }), image.base64 && _react.default.createElement(Img, {
        alt: alt,
        title: title,
        src: image.base64,
        style: imagePlaceholderStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 250
        },
        __self: this
      }), image.tracedSVG && _react.default.createElement(Img, {
        alt: alt,
        title: title,
        src: image.tracedSVG,
        style: imagePlaceholderStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 260
        },
        __self: this
      }), bgColor && _react.default.createElement(Tag, {
        title: title,
        style: {
          backgroundColor: bgColor,
          position: `absolute`,
          top: 0,
          bottom: 0,
          opacity: !this.state.imgLoaded ? 1 : 0,
          transitionDelay: `0.35s`,
          right: 0,
          left: 0
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 270
        },
        __self: this
      }), this.state.isVisible && _react.default.createElement(Img, {
        alt: alt,
        title: title,
        srcSet: image.srcSet,
        src: image.src,
        sizes: image.sizes,
        style: imageStyle,
        onLoad: () => {
          this.state.IOSupported && this.setState({
            imgLoaded: true
          });
          this.props.onLoad && this.props.onLoad();
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 287
        },
        __self: this
      }), _react.default.createElement("noscript", {
        dangerouslySetInnerHTML: {
          __html: noscriptImg((0, _objectSpread2.default)({
            alt,
            title
          }, image))
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 302
        },
        __self: this
      })));
    }

    if (resolutions) {
      const image = resolutions;
      const divStyle = (0, _objectSpread2.default)({
        position: `relative`,
        overflow: `hidden`,
        display: `inline-block`,
        width: image.width,
        height: image.height
      }, style);

      if (style.display === `inherit`) {
        delete divStyle.display;
      } // Use webp by default if browser supports it


      if (image.srcWebp && image.srcSetWebp && isWebpSupported()) {
        image.src = image.srcWebp;
        image.srcSet = image.srcSetWebp;
      } // The outer div is necessary to reset the z-index to 0.


      return _react.default.createElement(Tag, {
        className: `${outerWrapperClassName ? outerWrapperClassName : ``} gatsby-image-outer-wrapper`,
        style: {
          // Let users set component to be absolutely positioned.
          position: style.position === `absolute` ? `initial` : `relative`
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 335
        },
        __self: this
      }, _react.default.createElement(Tag, {
        className: `${className ? className : ``} gatsby-image-wrapper`,
        style: divStyle,
        ref: this.handleRef,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 344
        },
        __self: this
      }, image.base64 && _react.default.createElement(Img, {
        alt: alt,
        title: title,
        src: image.base64,
        style: imagePlaceholderStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 351
        },
        __self: this
      }), image.tracedSVG && _react.default.createElement(Img, {
        alt: alt,
        title: title,
        src: image.tracedSVG,
        style: imagePlaceholderStyle,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 361
        },
        __self: this
      }), bgColor && _react.default.createElement(Tag, {
        title: title,
        style: {
          backgroundColor: bgColor,
          width: image.width,
          opacity: !this.state.imgLoaded ? 1 : 0,
          transitionDelay: `0.25s`,
          height: image.height
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 371
        },
        __self: this
      }), this.state.isVisible && _react.default.createElement(Img, {
        alt: alt,
        title: title,
        width: image.width,
        height: image.height,
        srcSet: image.srcSet,
        src: image.src,
        style: imageStyle,
        onLoad: () => {
          this.setState({
            imgLoaded: true
          });
          this.props.onLoad && this.props.onLoad();
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 385
        },
        __self: this
      }), _react.default.createElement("noscript", {
        dangerouslySetInnerHTML: {
          __html: noscriptImg((0, _objectSpread2.default)({
            alt,
            title,
            width: image.width,
            height: image.height
          }, image))
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 401
        },
        __self: this
      })));
    }

    return null;
  }

}

Image.defaultProps = {
  fadeIn: true,
  alt: ``,
  Tag: `div`
};
Image.propTypes = {
  responsiveResolution: _propTypes.default.object,
  responsiveSizes: _propTypes.default.object,
  resolutions: _propTypes.default.object,
  sizes: _propTypes.default.object,
  fadeIn: _propTypes.default.bool,
  title: _propTypes.default.string,
  alt: _propTypes.default.string,
  className: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  // Support Glamor's css prop.
  outerWrapperClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  style: _propTypes.default.object,
  imgStyle: _propTypes.default.object,
  position: _propTypes.default.string,
  backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool]),
  onLoad: _propTypes.default.func,
  Tag: _propTypes.default.string
};
var _default = Image;
exports.default = _default;